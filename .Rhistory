theme(legend.position = "none") +
xlab("Habitat") +
ylab("Basal Area "~m^2)
sdi = function( tpa, qmd, unittype="imperial" )
{
# Function to calculate the stand density index
# by David R. Larsen, Copyright October 9, 2012
# Creative Commons http://creativecommons.org/licenses/by-nc/3.0/us/
if (unittype == "imperial" ){
sdi = tpa * ( qmd / 10 )^ 1.605
}else if ( unittype == "metric" ){
sdi = tpa * ( qmd / 25.4)^1.605
}else{
sdi = 0
}
sdi
}
table(tree$Plot..r....)
table(tree$Species)
table(tree$Plot..r...., tree$Species)
tree1 = as.data.frame(table(tree$Plot..r...., tree$Species))
View(tree1)
table(tree$Plot..r...., tree$Species)
tree1 = table(tree$Plot..r...., tree$Species)
aggregate(cbind(count = Species) ~ Plot..r....,
data = mydf,
FUN = function(x){NROW(x)})
aggregate(cbind(count = Species) ~ Plot..r....,
data = tree,
FUN = function(x){NROW(x)})
aggregate(cbind(count = Plot..r....) ~ Species,
data = tree,
FUN = function(x){NROW(x)})
aggregate(cbind(count = Species) ~ Plot..r...., Species,
data = tree,
FUN = function(x){NROW(x)})
aggregate(cbind(count = DBH..cm.) ~ Plot..r...., Species,
data = tree,
FUN = function(x){NROW(x)})
tree1 = as.data.frame.matrix(table(tree$Plot..r...., tree$Species))
View(tree1)
View(tree1)
tree1 = as.data.frame.matrix(table(tree$Plot..r....))
tree1 = as.data.frame.matrix(table(tree$Plot..r....))
tree1 = table(tree$Plot..r....)
tree1 = as.data.frame.matrix(table(tree$Plot..r....))
tree1 = as.data.frame.matrix(tree1)
tree1 = as.data.frame(table(tree$Plot..r....))
View(tree1)
tpa = as.data.frame(table(tree$Plot..r....))
View(tpa)
tpa = filter(filter(DBH..cm. != "NA"))
tpa = tree %>% (filter(DBH..cm. != "NA")) %>%
as.data.frame(table(tree$Plot..r....))
tpa = filter(tree, DBH..cm. != "NA") %>%
as.data.frame(table(tree$Plot..r....))
tpa = filter(tree, DBH..cm. != "NA")
as.data.frame(table(tpa$Plot..r....))
tpa = as.data.frame(table(tpa$Plot..r....))
tpa$tpa = ((tpa$Freq)/4047)
### Add in habitat column ###
tree = mutate(tree, habitat = str_extract(Plot..r...., "^.{2}"))
### Add in habitat column ###
tpa = mutate(tpa, habitat = str_extract(Plot..r...., "^.{2}"))
### Add in habitat column ###
tpa = mutate(tpa, habitat = str_extract(Var1, "^.{2}"))
### Add in habitat column ###
tpa = mutate(tpa, habitat = str_extract(Var1, "^.{2}"))
ggplot(tpa, aes(x = habitat, y = tpa, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Basal Area "~m^2)
ggplot(tpa, aes(x = habitat, y = tpa, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Trees per Acre")
tpa = filter(tree, DBH..cm. != "NA")
tpa = as.data.frame(table(tpa$Plot..r....))
tpa$tpa = ((tpa$Freq)/10000)
### Add in habitat column ###
tpa = mutate(tpa, habitat = str_extract(Var1, "^.{2}"))
ggplot(tpa, aes(x = habitat, y = tpa, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Trees per Hectare")
tpha = filter(tree, DBH..cm. != "NA")
tpha = as.data.frame(table(tpha$Plot..r....))
tpha$tpha = ((tpha$Freq)/10000)
### Add in habitat column ###
tpha = mutate(tpha, habitat = str_extract(Var1, "^.{2}"))
ggplot(tpha, aes(x = habitat, y = tpa, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Trees per Hectare")
ggplot(tpha, aes(x = habitat, y = tpha, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Trees per Hectare")
################################### Stand Density #####################################################
aver_BA = filter(tree, BA != "NA")
aver_BA = as.data.frame(table(tree$BA))
View(aver_BA)
################################### Stand Density #####################################################
aver_BA = filter(tree, BA != "NA")
aver_BA %>%
group_by(Plot..r...., habitat) %>%
summarise_at(vars(-group_cols()), list(mean = ~mean(BA, na.rm = TRUE),
sd = ~sd(BA, na.rm = TRUE),
se= ~sd(BA, na.rm = TRUE)/sqrt(n()))) %>%
summarise_at(vars(mean:se), mean, na.rm = TRUE)
aver_BA %>%
group_by(Plot..r...., habitat) %>%
summarise_at(vars(-group_cols()), list(mean = ~mean(BA, na.rm = TRUE)))
aver_BA = aver_BA %>%
group_by(Plot..r...., habitat) %>%
summarise_at(vars(-group_cols()), list(mean = ~mean(BA, na.rm = TRUE)))
View(aver_BA)
View(tpha)
qmd = sqrt((aver_BA$BA_mean/tpha$tpha)/0.00007854)
tree_aver = filter(tree, DBH..cm. != "NA")
tree_aver = as.data.frame(table(tree_aver$Plot..r....))
tree_aver$tpha = ((tree_aver$Freq)/10000)
View(tree_aver)
### Add in habitat column ###
tree_aver = mutate(tree_aver, habitat = str_extract(Var1, "^.{2}"))
ggplot(tree_aver, aes(x = habitat, y = tree_aver, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Trees per Hectare")
ggplot(tree_aver, aes(x = habitat, y = tpha, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Trees per Hectare")
################################### Stand Density #####################################################
tree_aver = filter(tree, BA != "NA") %>%
group_by(Plot..r...., habitat) %>%
summarise_at(vars(-group_cols()), list(mean = ~mean(BA, na.rm = TRUE))) %>%
merge()
################################### Stand Density #####################################################
tree_aver$BA_av = filter(tree, BA != "NA") %>%
group_by(Plot..r...., habitat) %>%
summarise_at(vars(-group_cols()), list(mean = ~mean(BA, na.rm = TRUE)))
View(aver_BA)
tree_aver = filter(tree, DBH..cm. != "NA")
tree_aver = as.data.frame(table(tree_aver$Plot..r....))
tree_aver$tpha = ((tree_aver$Freq)/10000)
### Add in habitat column ###
tree_aver = mutate(tree_aver, habitat = str_extract(Var1, "^.{2}"))
tpha = filter(tree, DBH..cm. != "NA")
tpha = as.data.frame(table(tpha$Plot..r....))
tpha$tpha = ((tpha$Freq)/10000)
### Add in habitat column ###
tpha = mutate(tpha, habitat = str_extract(Var1, "^.{2}"))
ggplot(tpha, aes(x = habitat, y = tpha, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Trees per Hectare")
################################### Stand Density #####################################################
BA_av = filter(tree, BA != "NA") %>%
group_by(Plot..r...., habitat) %>%
summarise_at(vars(-group_cols()), list(mean = ~mean(BA, na.rm = TRUE)))
View(tpha)
qmd = sqrt((BA_av$BA_mean /tpha$tpha)/0.00007854))
qmd = sqrt((BA_av$BA_mean /tpha$tpha)/0.00007854)
tpha$qmd = sqrt((BA_av$BA_mean /tpha$tpha)/0.00007854)
tpha$sdi = (tpha$tpha)*(tpha$qmd/25.4)^1.605
ggplot(tpha, aes(x = habitat, y = sdi, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Metric Stand Density Index")
sdi = function( tpa, qmd, unittype="imperial" )
{
# Function to calculate the stand density index
# by David R. Larsen, Copyright October 9, 2012
# Creative Commons http://creativecommons.org/licenses/by-nc/3.0/us/
if (unittype == "imperial" ){
sdi = tpa * ( qmd / 10 )^ 1.605
}else if ( unittype == "metric" ){
sdi = tpa * ( qmd / 25.4)^1.605
}else{
sdi = 0
}
sdi
}
sdi = function( tpa, qmd, unittype="metric" )
{
# Function to calculate the stand density index
# by David R. Larsen, Copyright October 9, 2012
# Creative Commons http://creativecommons.org/licenses/by-nc/3.0/us/
if (unittype == "imperial" ){
sdi = tpa * ( qmd / 10 )^ 1.605
}else if ( unittype == "metric" ){
sdi = tpa * ( qmd / 25.4)^1.605
}else{
sdi = 0
}
sdi
}
tpha$sdi2 = sdi(tpha$tpha,tpha$qmd)
View(tree)
basal.area.fn <- function(x){ (pi*((x)/2)^2) } # calculate basal area in m^2
tree$BA = basal.area.fn(tree$DBH..cm.)
ggplot(tree %>% dplyr::filter(BA != "NA"),
aes(x = habitat, y = BA, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Basal Area "~cm^2)
tpha = filter(tree, DBH..cm. != "NA")
tpha = as.data.frame(table(tpha$Plot..r....))
tpha$tpha = ((tpha$Freq)/10000)
### Add in habitat column ###
tpha = mutate(tpha, habitat = str_extract(Var1, "^.{2}"))
ggplot(tpha, aes(x = habitat, y = tpha, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Trees per Hectare")
################################### Stand Density Index #####################################################
BA_av = filter(tree, BA != "NA") %>%
group_by(Plot..r...., habitat) %>%
summarise_at(vars(-group_cols()), list(mean = ~mean(BA, na.rm = TRUE)))
tpha$qmd = sqrt((BA_av$BA_mean /tpha$tpha)/0.00007854)
tpha$sdi = (tpha$tpha)*(tpha$qmd/25.4)^1.605
ggplot(tpha, aes(x = habitat, y = sdi, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Metric Stand Density Index")
ggplot(tpha, aes(x = habitat, y = sdi, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Stand Density Index (cm)")
ggplot(tpha, aes(x = habitat, y = sdi, fill = habitat)) +
geom_boxplot() +
geom_jitter(alpha = 0.6, position=position_jitter(0.2)) +
theme_classic(base_size = 14) +
theme(legend.position = "none") +
xlab("Habitat") +
ylab("Metric Stand Density Index")
################### DeLuca Understory Species Richness/Diversity ###############################################################
c = read.csv("Data/C-Values_SouthFL - C-Values.csv")
cd = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
View(c)
View(cd)
################### DeLuca Understory Species Richness/Diversity ###############################################################
c = read.csv("Data/C-Values_SouthFL - C-Values.csv")
cd = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
m1 <- merge(c, cd, by.x = Scientific_Name)
View(c)
View(cd)
# Clears environment
rm(list=ls(all=TRUE))
# Clears history
cat("\014")
set.seed(2)
################### DeLuca Understory Species Richness/Diversity ###############################################################
c = read.csv("Data/C-Values_SouthFL - C-Values.csv")
cd = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
m1 <- merge(c, cd, by.x = Scientific_Name)
m1 <- merge(c, cd, by.x = "Scientific_Name")
View(m1)
################### DeLuca Understory Species Richness/Diversity ###############################################################
C_Values = read.csv("Data/C-Values_SouthFL - C-Values.csv")
DeLuca_List = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
c <- merge(C_Values, DeLuca_List, by.x = "Scientific_Name")
list.of.packages <- c("ggplot2", "tidyverse", "agricolae", "labelled", "vegan", "labdsv")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(ggplot2)
library(tidyverse)
library(vegan)
library(agricolae)
library(labelled)
library(labdsv)
# Clears environment
rm(list=ls(all=TRUE))
# Clears history
cat("\014")
set.seed(2)
################### DeLuca Understory Species Richness/Diversity ###############################################################
C_Values = read.csv("Data/C-Values_SouthFL - C-Values.csv")
DeLuca_List = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
c <- merge(C_Values, DeLuca_List, by.x = "Scientific_Name")
View(C_Values)
View(c)
C_DeLuca <- merge(C_Values, DeLuca_List, by.x = "Scientific_Name")
A_120 <- read.csv("Data/Master List of Plots - 120 A.csv")
B_120 <- read.csv("Data/Master List of Plots - 120 B.csv")
A_240 <- read.csv("Data/Master List of Plots - 240 A.csv")
B_240 <- read.csv("Data/Master List of Plots - 240 B.csv")
A_360 <- read.csv("Data/Master List of Plots - 360A.csv")
B_360 <- read.csv("Data/Master List of Plots - 360 B.csv")
### Makes Each Data Set Unique so we can combine  ###
A_120$Plot..1mx1m. <- paste0(A_120$Plot..1mx1m, ".120A")
B_120$Plot..1mx1m. <- paste0(B_120$Plot..1mx1m, ".120B")
A_240$Plot..1mx1m. <- paste0(A_240$Plot..1mx1m, ".240A")
B_240$Plot..1mx1m. <- paste0(B_240$Plot..1mx1m, ".240B")
A_360$Plot..1mx1m. <- paste0(A_360$Plot..1mx1m, ".360A")
B_360$Plot..1mx1m. <- paste0(B_360$Plot..1mx1m, ".360B")
### Combine All Data Sets ###
data = rbind(A_120, B_120, A_240, B_240, A_360, B_360)
### Add in habitat column ###
data = mutate(data, habitat = str_extract(Plot..1mx1m., "^.{2}"))
### Add in plot column ###
data = mutate(data, plot = str_extract(Plot..1mx1m., "^.{3}"))
### Remove NA Values ###
data = na.omit(data)
### Remove Physical Variables ###
sp_data = filter(data, !grepl('Bare ground', Species)) %>%
filter(!grepl('CWD', Species)) %>%
filter(!grepl('Leaf material', Species))
# Create Species Pivot Table #
Spp = dplyr::select(sp_data, Plot..1mx1m., Species, X..Cover) %>% matrify()
Spp[] <- lapply(Spp, as.numeric)
# Drop first column in spp data for vegdist #
Spp <- subset(Spp, select = -1 )
View(Spp)
View(C_DeLuca)
C_DeLuca$C.Value = toupper(C_DeLuca$C.Value)
### Load Data ###
C_Values = read.csv("Data/C-Values_SouthFL - C-Values.csv")
DeLuca_List = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
C_DeLuca <- merge(C_Values, DeLuca_List, by.x = "Scientific_Name")
C_DeLuca$C.Value = toupper(C_DeLuca$C.Value)
### Load Data ###
C_Values = read.csv("Data/C-Values_SouthFL - C-Values.csv")
DeLuca_List = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
C_DeLuca <- merge(C_Values, DeLuca_List, by.x = "Scientific_Name")
C_DeLuca$Acronym = toupper(C_DeLuca$Acronym)
A_120 <- read.csv("Data/Master List of Plots - 120 A.csv")
B_120 <- read.csv("Data/Master List of Plots - 120 B.csv")
A_240 <- read.csv("Data/Master List of Plots - 240 A.csv")
B_240 <- read.csv("Data/Master List of Plots - 240 B.csv")
A_360 <- read.csv("Data/Master List of Plots - 360A.csv")
B_360 <- read.csv("Data/Master List of Plots - 360 B.csv")
### Makes Each Data Set Unique so we can combine  ###
A_120$Plot..1mx1m. <- paste0(A_120$Plot..1mx1m, ".120A")
B_120$Plot..1mx1m. <- paste0(B_120$Plot..1mx1m, ".120B")
A_240$Plot..1mx1m. <- paste0(A_240$Plot..1mx1m, ".240A")
B_240$Plot..1mx1m. <- paste0(B_240$Plot..1mx1m, ".240B")
A_360$Plot..1mx1m. <- paste0(A_360$Plot..1mx1m, ".360A")
B_360$Plot..1mx1m. <- paste0(B_360$Plot..1mx1m, ".360B")
### Combine All Data Sets ###
data = rbind(A_120, B_120, A_240, B_240, A_360, B_360)
### Add in habitat column ###
data = mutate(data, habitat = str_extract(Plot..1mx1m., "^.{2}"))
### Add in plot column ###
data = mutate(data, plot = str_extract(Plot..1mx1m., "^.{3}"))
### Remove NA Values ###
data = na.omit(data)
### Remove Physical Variables ###
sp_data = filter(data, !grepl('Bare ground', Species)) %>%
filter(!grepl('CWD', Species)) %>%
filter(!grepl('Leaf material', Species))
# Create Species Pivot Table #
Spp = dplyr::select(sp_data, Plot..1mx1m., Species, X..Cover) %>% matrify()
Spp[] <- lapply(Spp, as.numeric)
# Drop first column in spp data for vegdist #
Spp <- subset(Spp, select = -1 )
# Create Grouped Treatment/ Environment Table and Summaries to fit Species Table #
Treat <- data.frame("names"=rownames(Spp), Spp)
Treat = mutate(Treat, habitat = str_extract(names, "^.{2}")) %>%
group_by(names, habitat) %>%
summarise()
Treat = mutate(Treat, plot = str_extract(names, "^.{3}"))
View(Treat)
View(sp_data)
### Load Data ###
C_Values = read.csv("Data/C-Values_SouthFL - C-Values.csv")
DeLuca_List = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
View(C_Values)
View(C_DeLuca)
View(c)
View(DeLuca_List)
C_DeLuca <- merge(C_Values, DeLuca_List, by.x = "Scientific_Name", all.x = TRUE)
View(C_DeLuca)
C_DeLuca <- merge(C_Values, DeLuca_List, by.x = "Scientific_Name", all.x = TRUE) %>%
filter(Acronym != NA)
C_DeLuca <- merge(C_Values, DeLuca_List, by.x = "Scientific_Name", all.x = TRUE) %>%
filter(Acronym != "NA")
C_DeLuca <- merge(C_Values, DeLuca_List, by.x = "Scientific_Name", all.x = TRUE)
C_DeLuca <- merge(C_Values, DeLuca_List, by.x = "Scientific_Name", all.x = TRUE) %>%
filter(Acronym != "NA")
View(c)
### Load Data ###
C_Values = read.csv("Data/C-Values_SouthFL - C-Values.csv")
DeLuca_List = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
C_DeLuca <- merge(C_Values, DeLuca_List, by.x = "Scientific_Name", all.x = TRUE) %>%
filter(Acronym != "NA")
C_DeLuca$Acronym = toupper(C_DeLuca$Acronym)
View(C_DeLuca)
C_DeLuca <- merge(DeLuca_List, C_Values, by.x = "Scientific_Name", all.x = TRUE) %>%
filter(Acronym != "NA")
View(C_DeLuca)
View(C_Values)
View(DeLuca_List)
View(C_Values)
### Load Data ###
A_120 <- read.csv("Data/Master List of Plots - 120 A.csv")
B_120 <- read.csv("Data/Master List of Plots - 120 B.csv")
A_240 <- read.csv("Data/Master List of Plots - 240 A.csv")
B_240 <- read.csv("Data/Master List of Plots - 240 B.csv")
A_360 <- read.csv("Data/Master List of Plots - 360A.csv")
B_360 <- read.csv("Data/Master List of Plots - 360 B.csv")
### Makes Each Data Set Unique so we can combine  ###
A_120$Plot..1mx1m. <- paste0(A_120$Plot..1mx1m, ".120A")
B_120$Plot..1mx1m. <- paste0(B_120$Plot..1mx1m, ".120B")
A_240$Plot..1mx1m. <- paste0(A_240$Plot..1mx1m, ".240A")
B_240$Plot..1mx1m. <- paste0(B_240$Plot..1mx1m, ".240B")
A_360$Plot..1mx1m. <- paste0(A_360$Plot..1mx1m, ".360A")
B_360$Plot..1mx1m. <- paste0(B_360$Plot..1mx1m, ".360B")
### Combine All Data Sets ###
data = rbind(A_120, B_120, A_240, B_240, A_360, B_360)
### Add in habitat column ###
data = mutate(data, habitat = str_extract(Plot..1mx1m., "^.{2}"))
### Add in plot column ###
data = mutate(data, plot = str_extract(Plot..1mx1m., "^.{3}"))
### Remove NA Values ###
data = na.omit(data)
### Remove Physical Variables ###
sp_data = filter(data, !grepl('Bare ground', Species)) %>%
filter(!grepl('CWD', Species)) %>%
filter(!grepl('Leaf material', Species))
### Load in C-Value Data ###
C_Values = read.csv("Data/C-Values_SouthFL - C-Values.csv")
DeLuca_List = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
C_DeLuca <- merge(DeLuca_List, C_Values, by.x = "Scientific_Name", all.x = TRUE) %>%
filter(Acronym != "NA")
C_DeLuca$Acronym = toupper(C_DeLuca$Acronym)
View(sp_data)
colnames(sp_data$Species) = c("Acronym")
colnames(sp_data)[2] <- "Acronym"
CC = merge(C_DeLuca, sp_data, by.x = "Acronym", all.x = TRUE)
View(CC)
CC = merge(sp_data, C_DeLuca, by.x = "Acronym", all.x = TRUE)
View(data)
CC = merge(sp_data, C_DeLuca, by.x = "Acronym")
CC = merge(sp_data, C_DeLuca, by.x = "Acronym", all.x = FALSE)
CC = merge(C_DeLuca, sp_data, by.x = "Acronym", all.x = TRUE)
CC = merge(C_DeLuca, sp_data, by.x = "Acronym", all.x = FALSE)
CC = merge(sp_data, C_DeLuca, by.x = "Acronym", all.x = TRUE)
View(C_DeLuca)
write.csv(C_DeLuca, Name, "Data/", row.names=FALSE)
write.csv(C_DeLuca, "Data/", row.names=FALSE)
write.csv(C_DeLuca, "Data/gk", row.names=FALSE)
write.csv(C_DeLuca, "Data/", row.names=FALSE)
write.csv(C_DeLuca, "Data/")
write.csv(C_DeLuca, "Data/gk.csv")
sum(is.na(CC$C.Value))
sum(is.na(C_DeLuca$C.Value))
### Load in C-Value Data ###
C_Values = read.csv("Data/C-Values_SouthFL - C-Values.csv")
DeLuca_List = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
-DeLuca_List$Scientific_Name
DeLuca_List$Scientific_Name[-2]
DeLuca_List = DeLuca_List$Scientific_Name[-2]
DeLuca_List = DeLuca_List$Scientific_Name[-2]
### Load in C-Value Data ###
C_Values = read.csv("Data/C-Values_SouthFL - C-Values.csv")
DeLuca_List = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
DeLuca_List = subset(DeLuca_List, select = -c(DeLuca_List$Scientific_Name) )
DeLuca_List = subset(DeLuca_List, select = -c(Scientific_Name) )
colnames(sp_data)[3] <- "Scientific_Name"
DeLuca_List = subset(DeLuca_List, select = -c(Scientific_Name) )
### Load in C-Value Data ###
C_Values = read.csv("Data/C-Values_SouthFL - C-Values.csv")
DeLuca_List = read.csv("Data/C-Values_SouthFL - DeLuca_Floristic_Data_Query_Cro.csv")
DeLuca_List = subset(DeLuca_List, select = -c(Scientific_Name) )
colnames(DeLuca_List)[3] <- "Scientific_Name"
C_DeLuca <- merge(DeLuca_List, C_Values, by.x = "Scientific_Name", all.x = TRUE) %>%
filter(Acronym != "NA")
C_DeLuca$Acronym = toupper(C_DeLuca$Acronym)
View(C_DeLuca)
sum(is.na(C_DeLuca$C.Value))
write.csv(C_DeLuca, "Data/gk.csv")
